@* 
    Model:
      - currentPage:int - The current page
      - countPages:int - The total number of pages
      - generateUrl:delegate Func<int?, string> Returns the URL corresponding to page p (1,2,3 ...)
*@

@model FptLongChauApp.Models.PagingModel
@{
    int currentPage  = Model.Currentpage;
    int countPages   = Model.Countpages;
    var generateUrl  = Model.GenerateUrl;


    
    if (currentPage > countPages) 
      currentPage = countPages;

    if (countPages <= 1) return;
    

    int? preview = null;
    int? next = null;

    if (currentPage > 1)
        preview = currentPage - 1;

    if (currentPage < countPages)
        next = currentPage + 1;

    // List of pages displayed in the navigation
    List<int> pagesRanges = new List<int>();


    int delta = 5;       // Number of extended pages on each side of the current page   
    int remain = delta * 2;   // Number of pages on both sides of the current page

    pagesRanges.Add(currentPage);
    // Pages expanding to both sides of the current page
    for (int i = 1; i <= delta; i++)
    {
        if (currentPage + i  <= countPages) {
            pagesRanges.Add(currentPage + i); 
            remain --;
        }
               
        if (currentPage - i >= 1) {
            pagesRanges.Insert(0, currentPage - i);
            remain --;
        }
            
    }
    // Handle adding pages to fill remain 
    //(occurs at the ends of the page range when there are not enough pages to insert)
    if (remain > 0) {
        if (pagesRanges[0] == 1) {
            for (int i = 1; i <= remain; i++)
            {
                if (pagesRanges.Last() + 1 <= countPages) {
                    pagesRanges.Add(pagesRanges.Last() + 1);
                }
            }
        }
        else {
            for (int i = 1; i <= remain; i++)
            {
                if (pagesRanges.First() - 1 > 1) {
                    pagesRanges.Insert(0, pagesRanges.First() - 1);
                }
            }
        }
    }

}

@* GENERATE HTML *@

<ul class="pagination">
    <!-- Previous page link -->
    @if (preview != null)
    {
        <li class="page-item">
            <a class="page-link" href="@generateUrl(preview)">Previous page</a>
        </li>
    }
    else
    {
        <li class="page-item disabled">
            <a class="page-link" href="#" tabindex="-1" aria-disabled="true">Previous page</a>
        </li>
    }
      
    <!-- Numbered page links -->
    @foreach (var pageitem in pagesRanges)
    {
        if (pageitem != currentPage) {
            <li class="page-item">
                <a class="page-link" href="@generateUrl(pageitem)">
                    @pageitem
                </a>
            </li>
        }   
        else 
        {
            <li class="page-item active" aria-current="page">
                <a class="page-link" href="#">@pageitem <span class="sr-only">(current)</span></a>
            </li>
        }
    }


    <!-- Next page link -->
    @if (next != null)
    {
        <li class="page-item">
            <a class="page-link" href="@generateUrl(next)">Next page</a>
        </li>
    }
    else 
    {
        <li class="page-item disabled">
            <a class="page-link" href="#" tabindex="-1" aria-disabled="true">Next Page</a>
        </li>
    }
</ul>